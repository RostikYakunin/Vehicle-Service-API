version: '3'

services:
  postgres:
    image: postgres:latest
    restart: unless-stopped
    container_name: postgres
    env_file: .env
    depends_on:
      - jenkins
    ports:
      - ${POSTGRES_PORT}:${POSTGRES_PORT}
    volumes:
      - ./db-data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD","pg_isready", "-U", "${POSTGRES_USER}"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - my_network

  flyway:
    image: flyway/flyway:latest
    restart: no
    container_name: flyway
    env_file: .env
    environment:
      - FLYWAY_USER=${POSTGRES_USER}
      - FLYWAY_PASSWORD=${POSTGRES_PASSWORD}
      - FLYWAY_URL=jdbc:postgresql://${POSTGRES_HOST}:${POSTGRES_PORT}/${POSTGRES_DB}
      - FLYWAY_SCHEMAS=public
    command: -connectRetries=5 migrate
    volumes:
      - ./src/main/resources/db/migration:/flyway/sql
    depends_on:
      - postgres
    networks:
      - my_network

  vehicle-app:
    build:
      context: .
      dockerfile: Dockerfile
    image: vehicle-app:latest
    container_name: vehicle-app
    env_file: .env
    ports:
      - ${SERVER_PORT}:${SERVER_PORT}
    restart: unless-stopped
    depends_on:
      - flyway
    networks:
      - my_network

  pgadmin:
    image: dpage/pgadmin4
    container_name: pgadmin4
    restart: unless-stopped
    ports:
      - "8000:80"
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_EMAIL}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_PASSWORD}
    volumes:
      - ./pgadmin-data:/var/lib/pgadmin
    depends_on:
      - flyway
    networks:
      - my_network

  jenkins:
    image: jenkins/jenkins:lts
    container_name: jenkins
    restart: unless-stopped
    privileged: true
    user: root
    ports:
      - ${JENKINS_PORT}:${JENKINS_PORT}
    volumes:
      - ./jenkins_configuration:/var/jenkins_home
      - ./docker.sock:/var/run/docker.sock
    networks:
      - my_network

volumes:
  db-data:
  pgadmin-data:

networks:
  my_network:
    driver: bridge